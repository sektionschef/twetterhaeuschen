// required packages: firmata, socket.io, oauth
var sys = require('sys');
var OAuth = require('oauth');

var credentials = require('./credentials/credentials.js');

var app = require('http').createServer(handler), 
    io = require('/usr/local/lib/node_modules/socket.io').listen(app), 
    fs = require('fs');


// --------------- SETUP ARDUINO ---------------
//	black: GND
//	red: 5V
//	orange: digital OUT Pin 9

var firmata = require('firmata');
var device = '/dev/ttyACM0'
var ServoPin = 9;
board = new firmata.Board(device, arduinoReady);
 
function arduinoReady(err) {
    if (err) {
        console.log(err);
        return;
    }
    console.log('Firmware: ' + board.firmware.name 
      + '-' + board.firmware.version.major 
      + '.' + board.firmware.version.minor);
 
    board.pinMode(ServoPin, board.MODES.SERVO);
    board.servoWrite(ServoPin,90);
}
 
app.listen(8080);
console.log("I am listening!");
 
// directs page requests to html files
function handler (req, res) {
  fs.readFile(__dirname + '/index.html',
  function (err, data) {
    if (err) {
      res.writeHead(500);
      return res.end('Error loading index.html');
    }
 
    res.writeHead(200);
    res.end(data);
  });
}
 
// this handles socket.io comm from html files
io.sockets.on('connection', function(socket) {
	socket.send('Connected to the Wetterhäuschen.'); //connected to socket.on('message')
 


    socket.on('message', function(brand) {
    	console.log(brand);


//--------------- VARIABLES --------------------------------
// BRAND
// brand is generated by html form
//var brand = "coca-cola";
// %40 = @

// -------------- KEYWORDS ---------------------------------
var keywords_good = brand + "%20love"; 
// var keywords_good = brand + "%20love%20OR%20like"; 
// alternatives
	// keywords: love%20OR%20like
	// :): %3A%29
//console.log(keywords_good)

var keywords_bad = brand + "%20hate";
// var keywords_bad = brand + "%20hate%20OR%20dislike";
// keyords: shit%20OR%20hate
// :(: %3A%28
//console.log(keywords_bad)


//---------------- API SAUGUNG --------------------------
var oauthgood = new OAuth.OAuth(
      'https://api.twitter.com/oauth/request_token',
      'https://api.twitter.com/oauth/access_token',
      credentials.consumer_key ,
      credentials.consumer_secret ,
      '1.0A',
      null,
      'HMAC-SHA1'
    );
    
oauthgood.get(
      'https://api.twitter.com/1.1/search/tweets.json?q=' + keywords_good + '&count=100&include_entities=true&result_type=recent',
      credentials.access_token , 
      credentials.access_token_secret , 
         // https://dev.twitter.com/docs/api/1.1/get/search/tweets 
	function(error, data) {
//	console.log(sys.inspect(data));
//	console.log(JSON.stringify(data,null,4));
//	console.log(JSON.stringify(JSON.parse(data),null,4));
	
	json_good = JSON.parse(data);
	var count_good = 0;
	var sum_good = 0;
	for (var k in json_good.statuses) {
	    	if (json_good.statuses.hasOwnProperty(k)) {
			sum_good = json_good.statuses[k].user.followers_count + sum_good;
			count_good = ++count_good
//			console.log(sum_good);
//			console.log(++count_good);			
		}
	}
	var good_val = count_good*sum_good;
	socket.send("Positive tweets * follower: " + good_val);

//----------------- BAD -------------------
var oauthbad = new OAuth.OAuth(
      'https://api.twitter.com/oauth/request_token',
      'https://api.twitter.com/oauth/access_token',
      credentials.consumer_key ,
      credentials.consumer_secret ,
      '1.0A',
      null,
      'HMAC-SHA1'
    );
    
oauthbad.get(
      'https://api.twitter.com/1.1/search/tweets.json?q=' + keywords_bad + '&count=100&include_entities=true&result_type=recent',
      credentials.access_token , 
      credentials.access_token_secret , 
         // https://dev.twitter.com/docs/api/1.1/get/search/tweets 
	function(error, data) {
//	console.log(sys.inspect(data));
//	console.log(JSON.stringify(data,null,4));
//	console.log(JSON.stringify(JSON.parse(data),null,4));

	json_bad = JSON.parse(data);
	var count_bad = 0;
	var sum_bad = 0;
	for (var k in json_bad.statuses) {
	    	if (json_bad.statuses.hasOwnProperty(k)) {
			sum_bad = json_bad.statuses[k].user.followers_count + sum_bad;
			count_bad = ++count_bad
//			console.log(sum_bad);
//			console.log(++count_bad);
		}
	}
	var bad_val = count_bad*sum_bad;
	socket.send("Negative tweets * follower: " + bad_val);

	var result = good_val/(good_val+bad_val);

	if (0.888 < result && result <= 1) 
		{
		board.servoWrite(ServoPin,50);
		socket.send("Result: <strong>Kaiserwetter</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0.777 < result && result <= 0.888) 
		{
		board.servoWrite(ServoPin,60);
		socket.send("Result: <strong>wolkenloser Himmel</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0.666 < result && result <= 0.777) 
		{
		board.servoWrite(ServoPin,70);
		socket.send("Result: <strong>heiter</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0.555 < result && result <= 0.666) {
		board.servoWrite(ServoPin,80);
		socket.send("Result: <strong>Quellwolken</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0.444 < result && result <= 0.555) {
		board.servoWrite(ServoPin,90);
		socket.send("Result: <strong>wechselhaft</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0.333 < result && result <= 0.444) {
		board.servoWrite(ServoPin,100);
		socket.send("Result: <strong>stark bewölkt</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0.222 < result && result <= 0.333) {
		board.servoWrite(ServoPin,110);
		socket.send("Result: <strong>Nieselregen</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0.111 < result && result <= 0.222) {
		board.servoWrite(ServoPin,120);
		socket.send("Result: <strong>Regenschauer</strong> ("+ Math.round(result*100)/100 +")");
		}
	else if (0 <= result && result <= 0.111) 
		{
		board.servoWrite(ServoPin,130);
		socket.send("Result: <strong>Gewitter</strong> ("+ Math.round(result*100)/100 +")");
		}

 
		});

	});
    	
    });

 
    socket.on('disconnect', function() {
        socket.send('disconnected...');
    });
});


